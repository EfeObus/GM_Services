version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: gm_services_db
    environment:
      POSTGRES_DB: gm_services
      POSTGRES_USER: gmservices
      POSTGRES_PASSWORD: gmservices_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - gm_services_network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: gm_services_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gm_services_network
    restart: unless-stopped

  # GM Services Web Application
  web:
    build: .
    container_name: gm_services_web
    environment:
      - FLASK_ENV=production
      - SQLALCHEMY_DATABASE_URI=postgresql://gmservices:gmservices_password@db:5432/gm_services
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis
    networks:
      - gm_services_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gm_services_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - gm_services_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery_worker:
    build: .
    container_name: gm_services_celery_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - SQLALCHEMY_DATABASE_URI=postgresql://gmservices:gmservices_password@db:5432/gm_services
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - gm_services_network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build: .
    container_name: gm_services_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - SQLALCHEMY_DATABASE_URI=postgresql://gmservices:gmservices_password@db:5432/gm_services
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - gm_services_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  gm_services_network:
    driver: bridge